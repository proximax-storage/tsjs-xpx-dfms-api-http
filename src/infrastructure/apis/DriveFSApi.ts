/* tslint:disable */
/* eslint-disable */
/**
 * DFMS API
 * DFMS node HTTP API. [Reference implementation in GO](https://github.com/proximax-storage/go-xpx-dfms-api-http) [API definition](https://github.com/proximax-storage/go-xpx-dfms-api)  API does not tries to follow idiomatic REST or other API patterns for reasons.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CidWrap,
    CidWrapFromJSON,
    CidWrapToJSON,
    ErrResult,
    ErrResultFromJSON,
    ErrResultToJSON,
    StatListWrap,
    StatListWrapFromJSON,
    StatListWrapToJSON,
    StatWrap,
    StatWrapFromJSON,
    StatWrapToJSON,
} from '../models';

export interface DriveAddRequest {
    argDrive: string;
    argDst: string;
    body: runtime.HTTPBody;
    flush?: boolean;
}

export interface DriveCpRequest {
    argDrive: string;
    argSrc: string;
    argDst: string;
    flush?: boolean;
}

export interface DriveFileRequest {
    argDrive: string;
    argFileCid: string;
}

export interface DriveFlushRequest {
    argDrive: string;
}

export interface DriveGetRequest {
    argDrive: string;
    argSrc: string;
}

export interface DriveLsRequest {
    argDrive: string;
    argSrc: string;
}

export interface DriveMkdirRequest {
    argDrive: string;
    argSrc: string;
    flush?: boolean;
}

export interface DriveMvRequest {
    argDrive: string;
    argSrc: string;
    argDst: string;
    flush?: boolean;
}

export interface DriveRmRequest {
    argDrive: string;
    argSrc: string;
    flush?: boolean;
}

export interface DriveStatRequest {
    argDrive: string;
    argSrc: string;
}

/**
 *
 */
export class DriveFSApi extends runtime.BaseAPI {

    /**
     * Adds to drive a new file/directory and sends it to remote nodes which
     * Add a file/directory
     */
    async driveAddRaw(requestParameters: DriveAddRequest): Promise<runtime.ApiResponse<CidWrap>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveAdd.');
        }

        if (requestParameters.argDst === null || requestParameters.argDst === undefined) {
            throw new runtime.RequiredError('argDst','Required parameter requestParameters.argDst was null or undefined when calling driveAdd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argDrive, requestParameters.argDst ];

        if (requestParameters.flush !== undefined) {
            queryParameters['flush'] = requestParameters.flush;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CidWrapFromJSON(jsonValue));
    }

    /**
     * Adds to drive a new file/directory and sends it to remote nodes which
     * Add a file/directory
     */
    async driveAdd(requestParameters: DriveAddRequest): Promise<CidWrap> {
        const response = await this.driveAddRaw(requestParameters);
        return await response.value();
    }

    /**
     * Copies a file/directory from a source path to a destination path It does not make the full copy of the file/directory, it just copies the reference
     * Copy file
     */
    async driveCpRaw(requestParameters: DriveCpRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveCp.');
        }

        if (requestParameters.argSrc === null || requestParameters.argSrc === undefined) {
            throw new runtime.RequiredError('argSrc','Required parameter requestParameters.argSrc was null or undefined when calling driveCp.');
        }

        if (requestParameters.argDst === null || requestParameters.argDst === undefined) {
            throw new runtime.RequiredError('argDst','Required parameter requestParameters.argDst was null or undefined when calling driveCp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argDrive, requestParameters.argSrc, requestParameters.argDst ];

        if (requestParameters.flush !== undefined) {
            queryParameters['flush'] = requestParameters.flush;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/cp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Copies a file/directory from a source path to a destination path It does not make the full copy of the file/directory, it just copies the reference
     * Copy file
     */
    async driveCp(requestParameters: DriveCpRequest): Promise<void> {
        await this.driveCpRaw(requestParameters);
    }

    /**
     * Returns a file from remote nodes or local store by CID
     * Get file by CID
     */
    async driveFileRaw(requestParameters: DriveFileRequest): Promise<Response> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveFile.');
        }

        if (requestParameters.argFileCid === null || requestParameters.argFileCid === undefined) {
            throw new runtime.RequiredError('argFileCid','Required parameter requestParameters.argFileCid was null or undefined when calling driveFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argDrive, requestParameters.argFileCid ];

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/file`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return response;
    }

    /**
     * Returns a file from remote nodes or local store by CID
     * Get file by CID
     */
    async driveFileAsText(requestParameters: DriveFileRequest): Promise<string> {
        const response = await this.driveFileRaw(requestParameters);
        return new runtime.TextApiResponse(response).value();
    }

    async driveFileAsBlob(requestParameters: DriveFileRequest): Promise<Blob> {
        const response = await this.driveFileRaw(requestParameters);
        return new runtime.BlobApiResponse(response).value();
    }

    async driveFileAsResponse(requestParameters: DriveFileRequest): Promise<Response> {
        return this.driveFileRaw(requestParameters);
    }

    /**
     * Flush pushes state of the local Drive to all replicators
     * Flush drive
     */
    async driveFlushRaw(requestParameters: DriveFlushRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveFlush.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = requestParameters.argDrive;

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/flush`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Flush pushes state of the local Drive to all replicators
     * Flush drive
     */
    async driveFlush(requestParameters: DriveFlushRequest): Promise<void> {
        await this.driveFlushRaw(requestParameters);
    }

    /**
     * Return a file/directory from remote nodes or local store by a path
     * Get a file or dir by a path
     */
    async driveGetRaw(requestParameters: DriveGetRequest): Promise<Response> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveGet.');
        }

        if (requestParameters.argSrc === null || requestParameters.argSrc === undefined) {
            throw new runtime.RequiredError('argSrc','Required parameter requestParameters.argSrc was null or undefined when calling driveGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argDrive, requestParameters.argSrc ];

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return response;
    }

    /**
     * Return a file/directory from remote nodes or local store by a path
     * Get a file or dir by a path
     */
    async driveGetAsText(requestParameters: DriveGetRequest): Promise<string> {
        const response = await this.driveGetRaw(requestParameters);
        return new runtime.TextApiResponse(response).value();
    }

    async driveGetAsBlob(requestParameters: DriveGetRequest): Promise<Blob> {
        const response = await this.driveGetRaw(requestParameters);
        return new runtime.BlobApiResponse(response).value();
    }

    async driveGetAsResponse(requestParameters: DriveGetRequest): Promise<Response> {
        return this.driveGetRaw(requestParameters);
    }

    /**
     * Returns information about a file/directory by a given path
     * List files
     */
    async driveLsRaw(requestParameters: DriveLsRequest): Promise<runtime.ApiResponse<StatListWrap>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveLs.');
        }

        if (requestParameters.argSrc === null || requestParameters.argSrc === undefined) {
            throw new runtime.RequiredError('argSrc','Required parameter requestParameters.argSrc was null or undefined when calling driveLs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argDrive, requestParameters.argSrc ];

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/ls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatListWrapFromJSON(jsonValue));
    }

    /**
     * Returns information about a file/directory by a given path
     * List files
     */
    async driveLs(requestParameters: DriveLsRequest): Promise<StatListWrap> {
        const response = await this.driveLsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new directory by a given path
     * Make directory
     */
    async driveMkdirRaw(requestParameters: DriveMkdirRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveMkdir.');
        }

        if (requestParameters.argSrc === null || requestParameters.argSrc === undefined) {
            throw new runtime.RequiredError('argSrc','Required parameter requestParameters.argSrc was null or undefined when calling driveMkdir.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argDrive, requestParameters.argSrc ];

        if (requestParameters.flush !== undefined) {
            queryParameters['flush'] = requestParameters.flush;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/mkdir`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new directory by a given path
     * Make directory
     */
    async driveMkdir(requestParameters: DriveMkdirRequest): Promise<void> {
        await this.driveMkdirRaw(requestParameters);
    }

    /**
     * Moves a file/directory from a source path to a destination path Use also to rename a file/directory
     * Move file
     */
    async driveMvRaw(requestParameters: DriveMvRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveMv.');
        }

        if (requestParameters.argSrc === null || requestParameters.argSrc === undefined) {
            throw new runtime.RequiredError('argSrc','Required parameter requestParameters.argSrc was null or undefined when calling driveMv.');
        }

        if (requestParameters.argDst === null || requestParameters.argDst === undefined) {
            throw new runtime.RequiredError('argDst','Required parameter requestParameters.argDst was null or undefined when calling driveMv.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argDrive, requestParameters.argSrc, requestParameters.argDst ];

        if (requestParameters.flush !== undefined) {
            queryParameters['flush'] = requestParameters.flush;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/mv`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Moves a file/directory from a source path to a destination path Use also to rename a file/directory
     * Move file
     */
    async driveMv(requestParameters: DriveMvRequest): Promise<void> {
        await this.driveMvRaw(requestParameters);
    }

    /**
     * Removes a file/directory by a path
     * Remove file
     */
    async driveRmRaw(requestParameters: DriveRmRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveRm.');
        }

        if (requestParameters.argSrc === null || requestParameters.argSrc === undefined) {
            throw new runtime.RequiredError('argSrc','Required parameter requestParameters.argSrc was null or undefined when calling driveRm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argDrive, requestParameters.argSrc ];

        if (requestParameters.flush !== undefined) {
            queryParameters['flush'] = requestParameters.flush;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/rm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a file/directory by a path
     * Remove file
     */
    async driveRm(requestParameters: DriveRmRequest): Promise<void> {
        await this.driveRmRaw(requestParameters);
    }

    /**
     * Returns information about a file/directory by a given path
     * File information
     */
    async driveStatRaw(requestParameters: DriveStatRequest): Promise<runtime.ApiResponse<StatWrap>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling driveStat.');
        }

        if (requestParameters.argSrc === null || requestParameters.argSrc === undefined) {
            throw new runtime.RequiredError('argSrc','Required parameter requestParameters.argSrc was null or undefined when calling driveStat.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argDrive, requestParameters.argSrc ];

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drive/stat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatWrapFromJSON(jsonValue));
    }

    /**
     * Returns information about a file/directory by a given path
     * File information
     */
    async driveStat(requestParameters: DriveStatRequest): Promise<StatWrap> {
        const response = await this.driveStatRaw(requestParameters);
        return await response.value();
    }

}
