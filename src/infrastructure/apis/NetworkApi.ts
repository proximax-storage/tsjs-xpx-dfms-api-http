/* tslint:disable */
/* eslint-disable */
/**
 * DFMS API
 * DFMS node HTTP API. [Reference implementation in GO](https://github.com/proximax-storage/go-xpx-dfms-api-http) [API definition](https://github.com/proximax-storage/go-xpx-dfms-api)  API does not tries to follow idiomatic REST or other API patterns for reasons.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddrListWrap,
    AddrListWrapFromJSON,
    AddrListWrapToJSON,
    ErrResult,
    ErrResultFromJSON,
    ErrResultToJSON,
    PeerIdWrap,
    PeerIdWrapFromJSON,
    PeerIdWrapToJSON,
    PeerListWrap,
    PeerListWrapFromJSON,
    PeerListWrapToJSON,
} from '../models';

export interface ConnectRequest {
    argAddr: string;
}

export interface DisconnectRequest {
    argAddr: string;
}

/**
 *
 */
export class NetworkApi extends runtime.BaseAPI {

    /**
     * Get all addresses of a node.
     * Node addresses
     */
    async addressesRaw(): Promise<runtime.ApiResponse<AddrListWrap>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/addrs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddrListWrapFromJSON(jsonValue));
    }

    /**
     * Get all addresses of a node.
     * Node addresses
     */
    async addresses(): Promise<AddrListWrap> {
        const response = await this.addressesRaw();
        return await response.value();
    }

    /**
     * Connect to a node by it address.
     * Connect to a node
     */
    async connectRaw(requestParameters: ConnectRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.argAddr === null || requestParameters.argAddr === undefined) {
            throw new runtime.RequiredError('argAddr','Required parameter requestParameters.argAddr was null or undefined when calling connect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = requestParameters.argAddr;

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Connect to a node by it address.
     * Connect to a node
     */
    async connect(requestParameters: ConnectRequest): Promise<void> {
        await this.connectRaw(requestParameters);
    }

    /**
     * Disconnect from a node by its address.
     * Disconnect from a node
     */
    async disconnectRaw(requestParameters: DisconnectRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.argAddr === null || requestParameters.argAddr === undefined) {
            throw new runtime.RequiredError('argAddr','Required parameter requestParameters.argAddr was null or undefined when calling disconnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = requestParameters.argAddr;

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/disconnect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disconnect from a node by its address.
     * Disconnect from a node
     */
    async disconnect(requestParameters: DisconnectRequest): Promise<void> {
        await this.disconnectRaw(requestParameters);
    }

    /**
     * Get ID of a node
     * Get ID
     */
    async getidRaw(): Promise<runtime.ApiResponse<PeerIdWrap>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerIdWrapFromJSON(jsonValue));
    }

    /**
     * Get ID of a node
     * Get ID
     */
    async getid(): Promise<PeerIdWrap> {
        const response = await this.getidRaw();
        return await response.value();
    }

    /**
     * Get all connected peers.
     * Connected peers
     */
    async peersRaw(): Promise<runtime.ApiResponse<PeerListWrap>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/peers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerListWrapFromJSON(jsonValue));
    }

    /**
     * Get all connected peers.
     * Connected peers
     */
    async peers(): Promise<PeerListWrap> {
        const response = await this.peersRaw();
        return await response.value();
    }

}
