/* tslint:disable */
/* eslint-disable */
/**
 * DFMS API
 * DFMS node HTTP API. [Reference implementation in GO](https://github.com/proximax-storage/go-xpx-dfms-api-http) [API definition](https://github.com/proximax-storage/go-xpx-dfms-api)  API does not tries to follow idiomatic REST or other API patterns for reasons.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorDTO,
    ErrorDTOFromJSON,
    ErrorDTOToJSON,
} from '../models';

export interface ConnectRequest {
    arg2: string;
}

export interface DisconnectRequest {
    arg2: string;
}

/**
 *
 */
export class NetworkApi extends runtime.BaseAPI {

    /**
     * Get all node addresses.
     * Node addresses
     */
    async addressesRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/addrs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all node addresses.
     * Node addresses
     */
    async addresses(): Promise<void> {
        await this.addressesRaw();
    }

    /**
     * Connect to a node by it address.
     * Connect to a node
     */
    async connectRaw(requestParameters: ConnectRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.arg2 === null || requestParameters.arg2 === undefined) {
            throw new runtime.RequiredError('arg2','Required parameter requestParameters.arg2 was null or undefined when calling connect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.arg2 !== undefined) {
            queryParameters['arg'] = requestParameters.arg2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Connect to a node by it address.
     * Connect to a node
     */
    async connect(requestParameters: ConnectRequest): Promise<void> {
        await this.connectRaw(requestParameters);
    }

    /**
     * Disconnect to a node by it address.
     * Disconnect to a node
     */
    async disconnectRaw(requestParameters: DisconnectRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.arg2 === null || requestParameters.arg2 === undefined) {
            throw new runtime.RequiredError('arg2','Required parameter requestParameters.arg2 was null or undefined when calling disconnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.arg2 !== undefined) {
            queryParameters['arg'] = requestParameters.arg2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/disconnect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disconnect to a node by it address.
     * Disconnect to a node
     */
    async disconnect(requestParameters: DisconnectRequest): Promise<void> {
        await this.disconnectRaw(requestParameters);
    }

    /**
     * Get ID of the node
     * Get ID
     */
    async getidRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get ID of the node
     * Get ID
     */
    async getid(): Promise<void> {
        await this.getidRaw();
    }

    /**
     * Get all connected peers.
     * Connected peers
     */
    async peersRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/net/peers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all connected peers.
     * Connected peers
     */
    async peers(): Promise<void> {
        await this.peersRaw();
    }

}
