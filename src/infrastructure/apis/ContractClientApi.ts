/* tslint:disable */
/* eslint-disable */
/**
 * DFMS API
 * DFMS node HTTP API. [Reference implementation in GO](https://github.com/proximax-storage/go-xpx-dfms-api-http) [API definition](https://github.com/proximax-storage/go-xpx-dfms-api)  API does not tries to follow idiomatic REST or other API patterns for reasons.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ContractDTO,
    ContractDTOFromJSON,
    ContractDTOToJSON,
    ErrorDTO,
    ErrorDTOFromJSON,
    ErrorDTOToJSON,
} from '../models';

export interface AmmendsRequest {
    arg1: string;
}

export interface ComposeRequest {
    arg1: number;
    arg2: number;
    replicas?: number;
    minReplicas?: number;
    billingPrice?: number;
    billingPeriod?: number;
    percentApprovers?: number;
}

export interface GetContractRequest {
    arg1: string;
}

/**
 *
 */
export class ContractClientApi extends runtime.BaseAPI {

    /**
     * Creates subscription for Drive Contract updates/corrections of any contract from the network by ID.
     * Ammendments subscriptio
     */
    async ammendsRaw(requestParameters: AmmendsRequest): Promise<runtime.ApiResponse<Array<ContractDTO>>> {
        if (requestParameters.arg1 === null || requestParameters.arg1 === undefined) {
            throw new runtime.RequiredError('arg1','Required parameter requestParameters.arg1 was null or undefined when calling ammends.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.arg1 !== undefined) {
            queryParameters['arg1'] = requestParameters.arg1;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contract/ammends`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContractDTOFromJSON));
    }

    /**
     * Creates subscription for Drive Contract updates/corrections of any contract from the network by ID.
     * Ammendments subscriptio
     */
    async ammends(requestParameters: AmmendsRequest): Promise<Array<ContractDTO>> {
        const response = await this.ammendsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Compose synchronously announces invites to the Network with current node as an owner and tries to find members which agrees on specified parameters and options. It does not guarantee success on resolving members. On success persists contract locally and gives ability to use DriveFS.
     * Creates new Drive contract
     */
    async composeRaw(requestParameters: ComposeRequest): Promise<runtime.ApiResponse<ContractDTO>> {
        if (requestParameters.arg1 === null || requestParameters.arg1 === undefined) {
            throw new runtime.RequiredError('arg1','Required parameter requestParameters.arg1 was null or undefined when calling compose.');
        }

        if (requestParameters.arg2 === null || requestParameters.arg2 === undefined) {
            throw new runtime.RequiredError('arg2','Required parameter requestParameters.arg2 was null or undefined when calling compose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.arg1 !== undefined) {
            queryParameters['arg1'] = requestParameters.arg1;
        }

        if (requestParameters.arg2 !== undefined) {
            queryParameters['arg2'] = requestParameters.arg2;
        }

        if (requestParameters.replicas !== undefined) {
            queryParameters['replicas'] = requestParameters.replicas;
        }

        if (requestParameters.minReplicas !== undefined) {
            queryParameters['min-replicas'] = requestParameters.minReplicas;
        }

        if (requestParameters.billingPrice !== undefined) {
            queryParameters['billing-price'] = requestParameters.billingPrice;
        }

        if (requestParameters.billingPeriod !== undefined) {
            queryParameters['billing-period'] = requestParameters.billingPeriod;
        }

        if (requestParameters.percentApprovers !== undefined) {
            queryParameters['percent-approvers'] = requestParameters.percentApprovers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contract/compose`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractDTOFromJSON(jsonValue));
    }

    /**
     * Compose synchronously announces invites to the Network with current node as an owner and tries to find members which agrees on specified parameters and options. It does not guarantee success on resolving members. On success persists contract locally and gives ability to use DriveFS.
     * Creates new Drive contract
     */
    async compose(requestParameters: ComposeRequest): Promise<ContractDTO> {
        const response = await this.composeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches for Drive Contract information over the network.
     * Get Drive contract infromation
     */
    async getContractRaw(requestParameters: GetContractRequest): Promise<runtime.ApiResponse<ContractDTO>> {
        if (requestParameters.arg1 === null || requestParameters.arg1 === undefined) {
            throw new runtime.RequiredError('arg1','Required parameter requestParameters.arg1 was null or undefined when calling getContract.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.arg1 !== undefined) {
            queryParameters['arg'] = requestParameters.arg1;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contract/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractDTOFromJSON(jsonValue.Contract));
    }

    /**
     * Searches for Drive Contract information over the network.
     * Get Drive contract infromation
     */
    async getContract(requestParameters: GetContractRequest): Promise<ContractDTO> {
        const response = await this.getContractRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all the contracts in which Node participates as an owner or a member
     * List Drive contracts node aware of
     */
    async lsRaw(): Promise<runtime.ApiResponse<Array<ContractDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contract/ls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.Ids.map(id => { return { drive: id }}).map(ContractDTOFromJSON));
    }

    /**
     * Lists all the contracts in which Node participates as an owner or a member
     * List Drive contracts node aware of
     */
    async ls(): Promise<Array<ContractDTO>> {
        const response = await this.lsRaw();
        return await response.value();
    }

}
