/* tslint:disable */
/* eslint-disable */
/**
 * DFMS API
 * DFMS node HTTP API. [Reference implementation in GO](https://github.com/proximax-storage/go-xpx-dfms-api-http) [API definition](https://github.com/proximax-storage/go-xpx-dfms-api)  API does not tries to follow idiomatic REST or other API patterns for reasons.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CidListWrap,
    CidListWrapFromJSON,
    CidListWrapToJSON,
    CidResultWrap,
    CidResultWrapFromJSON,
    CidResultWrapToJSON,
    ErrResult,
    ErrResultFromJSON,
    ErrResultToJSON,
    ExecutionsWrap,
    ExecutionsWrapFromJSON,
    ExecutionsWrapToJSON,
    ResultsWrap,
    ResultsWrapFromJSON,
    ResultsWrapToJSON,
    SuperContractWrap,
    SuperContractWrapFromJSON,
    SuperContractWrapToJSON,
    SupercontractExec,
    SupercontractExecFromJSON,
    SupercontractExecToJSON,
} from '../models';

export interface DeactivateRequest {
    argScId: string;
}

export interface DeployRequest {
    argDrive: string;
    argSrc: string;
}

export interface ExecuteRequest {
    argScId: string;
    argGas: number;
    argFuncName: string;
    argArgsArray?: Array<string>;
}

export interface GetSCRequest {
    argScId: string;
}

export interface LsSCRequest {
    argDrive: string;
}

export interface ResultsRequest {
    argTxId: string;
}

/**
 *
 */
export class SuperContractApi extends runtime.BaseAPI {

    /**
     * Deactivate a SuperContract by its ID.
     * Deactivate a SuperContract
     */
    async deactivateRaw(requestParameters: DeactivateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.argScId === null || requestParameters.argScId === undefined) {
            throw new runtime.RequiredError('argScId','Required parameter requestParameters.argScId was null or undefined when calling deactivate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = requestParameters.argScId;

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sc/deactivate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deactivate a SuperContract by its ID.
     * Deactivate a SuperContract
     */
    async deactivate(requestParameters: DeactivateRequest): Promise<void> {
        await this.deactivateRaw(requestParameters);
    }

    /**
     * Deploy a new SuperContract by a file path. Return the SuperContract ID.
     * Deploy a SuperContract
     */
    async deployRaw(requestParameters: DeployRequest): Promise<runtime.ApiResponse<CidResultWrap>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling deploy.');
        }

        if (requestParameters.argSrc === null || requestParameters.argSrc === undefined) {
            throw new runtime.RequiredError('argSrc','Required parameter requestParameters.argSrc was null or undefined when calling deploy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [requestParameters.argDrive, requestParameters.argSrc];

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sc/deploy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CidResultWrapFromJSON(jsonValue));
    }

    /**
     * Deploy a new SuperContract by a file path. Return the SuperContract ID.
     * Deploy a SuperContract
     */
    async deploy(requestParameters: DeployRequest): Promise<CidResultWrap> {
        const response = await this.deployRaw(requestParameters);
        return await response.value();
    }

    /**
     * Start execution of a SuperContract. Return the Transaction ID.
     * Execute a SuperContract
     */
    async executeRaw(requestParameters: ExecuteRequest): Promise<runtime.ApiResponse<SupercontractExec>> {
        if (requestParameters.argScId === null || requestParameters.argScId === undefined) {
            throw new runtime.RequiredError('argScId','Required parameter requestParameters.argScId was null or undefined when calling execute.');
        }

        if (requestParameters.argGas === null || requestParameters.argGas === undefined) {
            throw new runtime.RequiredError('argGas','Required parameter requestParameters.argGas was null or undefined when calling execute.');
        }

        if (requestParameters.argFuncName === null || requestParameters.argFuncName === undefined) {
            throw new runtime.RequiredError('argFuncName','Required parameter requestParameters.argFuncName was null or undefined when calling execute.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = [ requestParameters.argScId, requestParameters.argGas, requestParameters.argFuncName ];

        if (requestParameters.argArgsArray) {
            queryParameters['params'] = requestParameters.argArgsArray;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sc/exec`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SupercontractExecFromJSON(jsonValue));
    }

    /**
     * Start execution of a SuperContract. Return the Transaction ID.
     * Execute a SuperContract
     */
    async execute(requestParameters: ExecuteRequest): Promise<SupercontractExec> {
        const response = await this.executeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all execution results started by a node. Returns Transaction IDs.
     * Execution results
     */
    async executionsRaw(): Promise<runtime.ApiResponse<ExecutionsWrap>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sc/executions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExecutionsWrapFromJSON(jsonValue));
    }

    /**
     * Get all execution results started by a node. Returns Transaction IDs.
     * Execution results
     */
    async executions(): Promise<ExecutionsWrap> {
        const response = await this.executionsRaw();
        return await response.value();
    }

    /**
     * Get a SuperContract by ID.
     * Get a SuperContract
     */
    async getSCRaw(requestParameters: GetSCRequest): Promise<runtime.ApiResponse<SuperContractWrap>> {
        if (requestParameters.argScId === null || requestParameters.argScId === undefined) {
            throw new runtime.RequiredError('argScId','Required parameter requestParameters.argScId was null or undefined when calling getSC.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = requestParameters.argScId;

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sc/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SuperContractWrapFromJSON(jsonValue));
    }

    /**
     * Get a SuperContract by ID.
     * Get a SuperContract
     */
    async getSC(requestParameters: GetSCRequest): Promise<SuperContractWrap> {
        const response = await this.getSCRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all SuperContract on a drive.
     * Get SuperContracts IDs
     */
    async lsSCRaw(requestParameters: LsSCRequest): Promise<runtime.ApiResponse<CidListWrap>> {
        if (requestParameters.argDrive === null || requestParameters.argDrive === undefined) {
            throw new runtime.RequiredError('argDrive','Required parameter requestParameters.argDrive was null or undefined when calling lsSC.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = requestParameters.argDrive;

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sc/ls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CidListWrapFromJSON(jsonValue));
    }

    /**
     * Get all SuperContract on a drive.
     * Get SuperContracts IDs
     */
    async lsSC(requestParameters: LsSCRequest): Promise<CidListWrap> {
        const response = await this.lsSCRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get results of a SuperContract execution by its TxID.
     * Results of a SuperContract execution
     */
    async resultsRaw(requestParameters: ResultsRequest): Promise<runtime.ApiResponse<ResultsWrap>> {
        if (requestParameters.argTxId === null || requestParameters.argTxId === undefined) {
            throw new runtime.RequiredError('argTxId','Required parameter requestParameters.argTxId was null or undefined when calling results.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        queryParameters['arg'] = requestParameters.argTxId;

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sc/results`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultsWrapFromJSON(jsonValue));
    }

    /**
     * Get results of a SuperContract execution by its TxID.
     * Results of a SuperContract execution
     */
    async results(requestParameters: ResultsRequest): Promise<ResultsWrap> {
        const response = await this.resultsRaw(requestParameters);
        return await response.value();
    }

}
