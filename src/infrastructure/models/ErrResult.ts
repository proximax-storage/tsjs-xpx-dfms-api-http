/* tslint:disable */
/* eslint-disable */
/**
 * DFMS API
 * DFMS node HTTP API. [Reference implementation in GO](https://github.com/proximax-storage/go-xpx-dfms-api-http) [API definition](https://github.com/proximax-storage/go-xpx-dfms-api)  API does not tries to follow idiomatic REST or other API patterns for reasons. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ErrResult
 */
export interface ErrResult {
    /**
     * Error message
     * @type {string}
     * @memberof ErrResult
     */
    message?: string;
    /**
     * * 0 - Normal - is a normal error. The command failed for some reason that's not a bug.
     * * 1 - Client - means the client made an invalid request.
     * * 2 - Implementation - means there's a bug in the implementation.
     * * 3 - RateLimited - is returned when the operation has been rate-limited.
     * * 4 - Forbidden - is returned when the client doesn't have permission to
     *       perform the requested operation.
     * @type {number}
     * @memberof ErrResult
     */
    code?: ErrResultCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ErrResult
     */
    type?: ErrResultTypeEnum;
}

export function ErrResultFromJSON(json: any): ErrResult {
    return ErrResultFromJSONTyped(json, false);
}

export function ErrResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'message': !exists(json, 'Message') ? undefined : json['Message'],
        'code': !exists(json, 'Code') ? undefined : json['Code'],
        'type': !exists(json, 'Type') ? undefined : json['Type'],
    };
}

export function ErrResultToJSON(value?: ErrResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Message': value.message,
        'Code': value.code,
        'Type': value.type,
    };
}

/**
* @export
* @enum {string}
*/
export enum ErrResultCodeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
* @export
* @enum {string}
*/
export enum ErrResultTypeEnum {
    Error = 'error'
}


